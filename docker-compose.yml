version: "3.8"

services:
  # PostgreSQL database for local development
  postgres:
    image: postgres:15-alpine
    container_name: taskapp_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: taskapp_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: taskapp_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskapp_backend
    environment:
      NODE_ENV: development
      PORT: 8000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: taskapp_dev
      JWT_SECRET: your-super-secret-jwt-key-for-development
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:8000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React app
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api
    container_name: taskapp_frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: taskapp_network
